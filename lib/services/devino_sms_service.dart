import 'dart:convert';
import 'package:http/http.dart' as http;
import '../utils/phone_utils.dart';

class DevinoSmsService {
  static const String _baseUrl = 'https://phoneverification.devinotele.com';
  static const String _apiKey = '8YF4D4R8k094r8uR3nwiEnsRuwIXRW67';
  
  static DevinoSmsService? _instance;
  static DevinoSmsService get instance => _instance ??= DevinoSmsService._();
  DevinoSmsService._();

  Map<String, String> get _headers => {
    'Content-Type': 'application/json',
    'Accept': 'application/json',
    'X-ApiKey': _apiKey,
  };

  Future<Map<String, dynamic>> sendSmsCode(String phoneNumber) async {
    try {
      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è Devino 2FA API
      // –ü—Ä–æ–±—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫—ã—Ä–≥—ã–∑—Å–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞
      final normalizedPhone = PhoneUtils.normalizePhoneNumber(phoneNumber).replaceFirst('+', '');
      
      print('üì± [Devino 2FA] –ò—Å—Ö–æ–¥–Ω—ã–π –Ω–æ–º–µ—Ä: $phoneNumber');
      print('üì± [Devino 2FA] –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä: $normalizedPhone');
      print('üì± [Devino 2FA] API URL: $_baseUrl/GenerateCode');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
      try {
        final connectivityResponse = await http.get(
          Uri.parse('https://www.google.com'),
        ).timeout(const Duration(seconds: 5));
        
        if (connectivityResponse.statusCode != 200) {
          print('‚ö†Ô∏è [Devino 2FA] –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º');
          return {
            'success': false,
            'error': '–ü—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º',
          };
        }
      } catch (e) {
        print('‚ö†Ô∏è [Devino 2FA] –ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: $e');
        return {
          'success': false,
          'error': '–ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è',
        };
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–¥–∞ —á–µ—Ä–µ–∑ 2FA API
      final requestBody = {
        'DestinationNumber': normalizedPhone,
      };

      print('üì§ [Devino 2FA] –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${jsonEncode(requestBody)}');

      final response = await http.post(
        Uri.parse('$_baseUrl/GenerateCode'),
        headers: _headers,
        body: jsonEncode(requestBody),
      ).timeout(const Duration(seconds: 30));

      print('üì§ [Devino 2FA] –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ${response.statusCode}');
      print('üì§ [Devino 2FA] –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: ${response.body}');

      if (response.statusCode == 200) {
        final responseData = jsonDecode(response.body);
        
        if (responseData['Code'] == 0) {
          // SMS –∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ Devino 2FA
          print('‚úÖ [Devino 2FA] SMS –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
          
          return {
            'success': true,
            'messageId': 'devino_2fa_${DateTime.now().millisecondsSinceEpoch}',
            'phoneNumber': normalizedPhone,
            'data': responseData,
            'provider': 'devino_2fa',
            'description': responseData['Description'],
          };
        } else {
          print('‚ùå [Devino 2FA] API –æ—à–∏–±–∫–∞: ${responseData['Code']} - ${responseData['Description']}');
          return {
            'success': false,
            'error': 'Devino 2FA API –æ—à–∏–±–∫–∞: ${responseData['Description']}',
          };
        }
      } else {
        print('‚ùå [Devino 2FA] HTTP –æ—à–∏–±–∫–∞: ${response.statusCode}');
        return {
          'success': false,
          'error': 'HTTP –æ—à–∏–±–∫–∞: ${response.statusCode}',
        };
      }
    } catch (e) {
      print('‚ùå [Devino 2FA] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS: $e');
      
      return {
        'success': false,
        'error': '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: $e',
      };
    }
  }

  Future<Map<String, dynamic>> getSmsStatus(String messageId, String phoneNumber) async {
    try {
      final normalizedPhone = PhoneUtils.normalizePhoneNumber(phoneNumber).replaceFirst('+', '');
      
      print('üì± [Devino] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ SMS: $messageId –¥–ª—è $normalizedPhone');

      final response = await http.get(
        Uri.parse('$_baseUrl/sms/status?messageId=$messageId&msisdn=$normalizedPhone'),
        headers: _headers,
      ).timeout(const Duration(seconds: 30));

      print('üì± [Devino] –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç: ${response.statusCode}');
      print('üì± [Devino] –°—Ç–∞—Ç—É—Å —Ç–µ–ª–æ: ${response.body}');

      if (response.statusCode == 200) {
        final responseData = jsonDecode(response.body);
        
        if (responseData['code'] == 0 && responseData['messages'].isNotEmpty) {
          final message = responseData['messages'][0];
          
          return {
            'success': true,
            'status': message['status'],
            'statusTime': message['statusTime'],
            'data': responseData,
          };
        } else {
          return {
            'success': false,
            'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å',
            'code': responseData['code'],
          };
        }
      } else {
        return {
          'success': false,
          'error': 'HTTP –æ—à–∏–±–∫–∞: ${response.statusCode}',
          'statusCode': response.statusCode,
        };
      }
    } catch (e) {
      print('‚ùå [Devino] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: $e');
      return {
        'success': false,
        'error': '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: $e',
      };
    }
  }



  // –ü—Ä–æ–≤–µ—Ä–∫–∞ SMS –∫–æ–¥–∞ —á–µ—Ä–µ–∑ Devino 2FA API
  Future<Map<String, dynamic>> checkSmsCode(String phoneNumber, String code) async {
    try {
      final normalizedPhone = PhoneUtils.normalizePhoneNumber(phoneNumber).replaceFirst('+', '');
      
      print('üì± [Devino 2FA] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞: $code –¥–ª—è –Ω–æ–º–µ—Ä–∞: $normalizedPhone');
      
      final requestBody = {
        'DestinationNumber': normalizedPhone,
        'Code': code,
      };

      print('üì§ [Devino 2FA] –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: ${jsonEncode(requestBody)}');

      final response = await http.post(
        Uri.parse('$_baseUrl/CheckCode'),
        headers: _headers,
        body: jsonEncode(requestBody),
      ).timeout(const Duration(seconds: 30));

      print('üì§ [Devino 2FA] –û—Ç–≤–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: ${response.statusCode}');
      print('üì§ [Devino 2FA] –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: ${response.body}');

      if (response.statusCode == 200) {
        final responseData = jsonDecode(response.body);
        
        if (responseData['Code'] == 0) {
          print('‚úÖ [Devino 2FA] –ö–æ–¥ –ø—Ä–æ–≤–µ—Ä–µ–Ω —É—Å–ø–µ—à–Ω–æ');
          return {
            'success': true,
            'valid': true,
            'data': responseData,
          };
        } else {
          print('‚ùå [Devino 2FA] –ö–æ–¥ –Ω–µ–≤–µ—Ä–Ω—ã–π: ${responseData['Code']} - ${responseData['Description']}');
          return {
            'success': false,
            'valid': false,
            'error': 'Devino 2FA API –æ—à–∏–±–∫–∞: ${responseData['Description']}',
          };
        }
      } else {
        print('‚ùå [Devino 2FA] HTTP –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: ${response.statusCode}');
        return {
          'success': false,
          'valid': false,
          'error': 'HTTP –æ—à–∏–±–∫–∞: ${response.statusCode}',
        };
      }
    } catch (e) {
      print('‚ùå [Devino 2FA] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞: $e');
      return {
        'success': false,
        'valid': false,
        'error': '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: $e',
      };
    }
  }

  String getSmsStatusDescription(String status) {
    switch (status) {
      case '0':
        return '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ';
      case '1':
        return '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ';
      case '2':
        return '–ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ';
      case '3':
        return '–í –æ—á–µ—Ä–µ–¥–∏';
      case '4':
        return '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ';
      case '5':
        return '–ò—Å—Ç–µ–∫ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è';
      default:
        return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å: $status';
    }
  }
}
