import 'dart:convert';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:http/http.dart' as http;
import '../config/api_config.dart';
import '../utils/phone_utils.dart';
import '../styles/app_colors.dart';
import 'photo_verification_service.dart';

class FirebaseMessagingService {
  static final FirebaseMessagingService _instance = FirebaseMessagingService._internal();
  factory FirebaseMessagingService() => _instance;
  FirebaseMessagingService._internal();

  final FirebaseMessaging _firebaseMessaging = FirebaseMessaging.instance;
  String? _fcmToken;

  Future<void> initialize() async {
    try {
      await _requestPermissions();
      await _getFcmToken();
      _setupMessageHandlers();
      print('‚úÖ Firebase Messaging –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firebase Messaging: $e');
    }
  }

  Future<void> _requestPermissions() async {
    final settings = await _firebaseMessaging.requestPermission(
      alert: true,
      announcement: false,
      badge: true,
      carPlay: false,
      criticalAlert: false,
      provisional: false,
      sound: true,
    );

    if (settings.authorizationStatus == AuthorizationStatus.authorized) {
      print('‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã');
    } else if (settings.authorizationStatus == AuthorizationStatus.provisional) {
      print('‚ö†Ô∏è –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
    } else {
      print('‚ùå –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã');
    }
  }

  Future<void> _getFcmToken() async {
    try {
      _fcmToken = await _firebaseMessaging.getToken();
      if (_fcmToken != null) {
        print('üì± FCM Token: ${_fcmToken!.substring(0, 20)}...');
        await _saveTokenLocally();
        await _sendTokenToServer();
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è FCM —Ç–æ–∫–µ–Ω–∞: $e');
    }
  }

  Future<void> _saveTokenLocally() async {
    if (_fcmToken != null) {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setString('fcm_token', _fcmToken!);
    }
  }

  Future<void> _sendTokenToServer() async {
    try {
      print('üîç [FCM] –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É FCM —Ç–æ–∫–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä');
      print('üîç [FCM] –¢–æ–∫–µ–Ω: ${_fcmToken?.substring(0, 20)}...');
      
      final prefs = await SharedPreferences.getInstance();
      final driverData = prefs.getString('driver_data');
      print('üîç [FCM] –î–∞–Ω–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª—è –∏–∑ SharedPreferences: ${driverData != null ? "–Ω–∞–π–¥–µ–Ω—ã" : "–ù–ï –Ω–∞–π–¥–µ–Ω—ã"}');
      
      if (driverData == null || _fcmToken == null) {
        print('‚ùå [FCM] –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª—è –∏–ª–∏ FCM —Ç–æ–∫–µ–Ω–∞');
        return;
      }

      final driver = json.decode(driverData);
      final driverPhone = driver['phoneNumber'] ?? '';
      print('üîç [FCM] –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö: $driverPhone');
      
      if (driverPhone.isEmpty) {
        print('‚ùå [FCM] –ù–µ—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–æ–¥–∏—Ç–µ–ª—è');
        return;
      }

      final normalizedPhone = PhoneUtils.normalizePhoneNumber(driverPhone);
      print('üîç [FCM] –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä: $normalizedPhone');
      
          final url = '${ApiConfig.baseUrl}/driver/update-fcm-token';
      print('üîç [FCM] URL –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: $url');
      
      final requestBody = {
        'phone_number': normalizedPhone,
        'fcm_token': _fcmToken,
      };
      print('üîç [FCM] –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞: ${json.encode(requestBody)}');
      print('üîç [FCM] –ó–∞–≥–æ–ª–æ–≤–∫–∏: ${ApiConfig.defaultHeaders}');
      
      final response = await http.post(
        Uri.parse(url),
        headers: ApiConfig.defaultHeaders,
        body: json.encode(requestBody),
      );

      print('üîç [FCM] –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.statusCode}');
      print('üîç [FCM] –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: ${response.body}');
      print('üîç [FCM] –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: ${response.headers}');

      if (response.statusCode == 200) {
        print('‚úÖ [FCM] FCM —Ç–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä');
      } else {
        print('‚ùå [FCM] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ FCM —Ç–æ–∫–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä: ${response.statusCode} ${response.body}');
      }
    } catch (e) {
      print('‚ùå [FCM] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ FCM —Ç–æ–∫–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä: $e');
      print('‚ùå [FCM] Stack trace: ${StackTrace.current}');
    }
  }

  void _setupMessageHandlers() {
    FirebaseMessaging.onMessage.listen(_handleForegroundMessage);
    FirebaseMessaging.onMessageOpenedApp.listen(_handleBackgroundMessage);
    FirebaseMessaging.onBackgroundMessage(_firebaseMessagingBackgroundHandler);
  }

  Future<void> _handleForegroundMessage(RemoteMessage message) async {
    print('üîç [FCM] –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ foreground');
    print('üîç [FCM] Message ID: ${message.messageId}');
    print('üîç [FCM] Title: ${message.notification?.title}');
    print('üîç [FCM] Body: ${message.notification?.body}');
    print('üîç [FCM] Data: ${message.data}');
    print('üîç [FCM] From: ${message.from}');
    
    await _playNotificationSound();
    await _vibrateDevice();
    
    _showInAppNotification(message);
  }

  Future<void> _handleBackgroundMessage(RemoteMessage message) async {
    print('üîç [FCM] –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ background');
    print('üîç [FCM] Message ID: ${message.messageId}');
    print('üîç [FCM] Title: ${message.notification?.title}');
    print('üîç [FCM] Body: ${message.notification?.body}');
    print('üîç [FCM] Data: ${message.data}');
    print('üîç [FCM] From: ${message.from}');
    
    await _playNotificationSound();
    await _vibrateDevice();
    
    _navigateToRelevantScreen(message);
  }

  Future<void> _playNotificationSound() async {
    try {
      await SystemSound.play(SystemSoundType.alert);
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞: $e');
    }
  }

  Future<void> _vibrateDevice() async {
    try {
      await HapticFeedback.mediumImpact();
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –≤–∏–±—Ä–∞—Ü–∏–∏: $e');
    }
  }

  void _showInAppNotification(RemoteMessage message) {
    final context = _getCurrentContext();
    if (context != null) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(message.notification?.title ?? '–ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ'),
          backgroundColor: AppColors.primary,
          duration: const Duration(seconds: 4),
          action: SnackBarAction(
            label: '–û—Ç–∫—Ä—ã—Ç—å',
            textColor: AppColors.surface,
            onPressed: () => _navigateToRelevantScreen(message),
          ),
        ),
      );
    }
  }

  void _navigateToRelevantScreen(RemoteMessage message) {
    print('üîç [FCM] –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∫ —ç–∫—Ä–∞–Ω—É');
    final context = _getCurrentContext();
    if (context == null) {
      print('‚ùå [FCM] Context –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏');
      return;
    }

    final data = message.data;
    final type = data['type'];
    print('üîç [FCM] –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: $type');
    print('üîç [FCM] –î–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: $data');

        switch (type) {
          case 'photo_verification_approved':
            print('üîç [FCM] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–¥–æ–±—Ä–µ–Ω–∏–µ —Ñ–æ—Ç–æ–∫–æ–Ω—Ç—Ä–æ–ª—è');
            _updatePhotoVerificationStatus('approved', null);
            Navigator.of(context).pushNamedAndRemoveUntil(
              '/photocontrol',
              (route) => false,
            );
            break;
          case 'photo_verification_rejected':
            final reason = data['rejection_reason'];
            print('üîç [FCM] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ–∫–æ–Ω—Ç—Ä–æ–ª—è, –ø—Ä–∏—á–∏–Ω–∞: $reason');
            _updatePhotoVerificationStatus('rejected', reason);
            Navigator.of(context).pushNamedAndRemoveUntil(
              '/photocontrol',
              (route) => false,
            );
            break;
          case 'balance_topup':
            final amount = data['amount'];
            final newBalance = data['new_balance'];
            print('üîç [FCM] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞: $amount —Å–æ–º, –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: $newBalance —Å–æ–º');
            _updateDriverBalance(newBalance);
            Navigator.of(context).pushNamedAndRemoveUntil(
              '/home',
              (route) => false,
            );
            break;
          default:
            print('‚ö†Ô∏è [FCM] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: $type');
            break;
        }
  }

  void _updatePhotoVerificationStatus(String status, String? rejectionReason) {
    try {
      final photoService = PhotoVerificationService();
      photoService.handleNotificationUpdate(status, rejectionReason);
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ñ–æ—Ç–æ–∫–æ–Ω—Ç—Ä–æ–ª—è: $e');
    }
  }

  void _updateDriverBalance(String newBalance) {
    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤ SharedPreferences
      SharedPreferences.getInstance().then((prefs) {
        final driverData = prefs.getString('driver_data');
        if (driverData != null) {
          final driver = json.decode(driverData);
          driver['balance'] = double.parse(newBalance);
          prefs.setString('driver_data', json.encode(driver));
          print('‚úÖ –ë–∞–ª–∞–Ω—Å –≤–æ–¥–∏—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: $newBalance —Å–æ–º');
        }
      });
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –≤–æ–¥–∏—Ç–µ–ª—è: $e');
    }
  }

  BuildContext? _getCurrentContext() {
    return navigatorKey.currentContext;
  }

  Future<void> refreshToken() async {
    await _getFcmToken();
  }

  String? get currentToken => _fcmToken;
}

Future<void> _firebaseMessagingBackgroundHandler(RemoteMessage message) async {
  print('üì± –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${message.messageId}');
}

final GlobalKey<NavigatorState> navigatorKey = GlobalKey<NavigatorState>();
