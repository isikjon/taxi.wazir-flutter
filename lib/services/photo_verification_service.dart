import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:flutter/material.dart';
import '../styles/app_colors.dart';
import 'package:flutter/foundation.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../config/api_config.dart';
import 'photo_storage_service.dart';
// –£—Å–ª–æ–≤–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏)

class PhotoVerificationService {
  final PhotoStorageService _photoStorage = PhotoStorageService();

  Future<bool> submitPhotosForVerification(Map<String, String> photos) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final driverData = prefs.getString('driver_data');
      
      if (driverData == null) {
        print('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª—è');
        return false;
      }
      
      final driver = json.decode(driverData);
      final driverPhone = driver['phoneNumber'] ?? '';
      
      if (driverPhone.isEmpty) {
        print('‚ùå –ù–µ—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–æ–¥–∏—Ç–µ–ª—è');
        return false;
      }
      
      final url = '${ApiConfig.baseUrl}/api/photo-control/submit';
      print('üì∏ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –Ω–∞: $url');
      print('üì∏ –¢–µ–ª–µ—Ñ–æ–Ω –≤–æ–¥–∏—Ç–µ–ª—è: $driverPhone');
      print('üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: ${photos.keys.toList()}');
      
      // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
      final Map<String, String> realPhotoPaths = {};
      for (final entry in photos.entries) {
        final realPath = await _photoStorage.getPhotoPath(entry.key);
        if (realPath != null) {
          realPhotoPaths[entry.key] = realPath;
          print('üì∏ ${entry.key}: $realPath');
        } else {
          print('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –¥–ª—è ${entry.key}');
        }
      }
      
      if (realPhotoPaths.isEmpty) {
        print('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏');
        return false;
      }
      
      // –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º multipart –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤ (—É–±–∏—Ä–∞–µ–º –≤–µ–±-–ª–æ–≥–∏–∫—É)
      print('üì∏ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã —á–µ—Ä–µ–∑ multipart/form-data');
      
      final request = http.MultipartRequest('POST', Uri.parse(url));
      request.fields['driver_phone'] = driverPhone;
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∫–∞–∫ —Ñ–∞–π–ª—ã
      for (final entry in realPhotoPaths.entries) {
        try {
          if (kIsWeb) {
            // –î–ª—è –≤–µ–±-–≤–µ—Ä—Å–∏–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º blob –≤ –±–∞–π—Ç—ã
            await _addWebFileToRequest(request, entry.key, entry.value);
          } else {
            // –î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º –∏—Å–ø–æ–ª—å–∑—É–µ–º fromPath
            final file = await http.MultipartFile.fromPath(
              entry.key,
              entry.value,
              filename: '${entry.key}.jpg',
            );
            request.files.add(file);
          }
          print('üì∏ –î–æ–±–∞–≤–ª–µ–Ω —Ñ–∞–π–ª ${entry.key}: ${entry.value}');
        } catch (e) {
          print('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${entry.key}: $e');
        }
      }
      
      final response = await request.send();
      final statusCode = response.statusCode;
      final responseBody = await response.stream.bytesToString();
      
      print('üì∏ –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: $statusCode');
      print('üì∏ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: $responseBody');
      
      if (statusCode == 200) {
        final responseData = json.decode(responseBody);
        if (responseData['success'] == true) {
          await _photoStorage.setVerificationStatus('pending');
          print('‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É');
          return true;
        }
      }
      
      print('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: $responseBody');
      return false;
      
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É: $e');
      return false;
    }
  }

  Future<void> _addWebFileToRequest(http.MultipartRequest request, String fieldName, String blobUrl) async {
    if (!kIsWeb) return;
    
    try {
      // –í–µ–±-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π –∫–æ–¥ –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–π —Å–±–æ—Ä–∫–∏
      if (kIsWeb) {
        throw UnimplementedError('Web blob handling not available in mobile build');
      }
      
      // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ - –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
      print('üì∏ –í–µ–±-—Ñ–∞–π–ª $fieldName –ø—Ä–æ–ø—É—â–µ–Ω –≤ –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±-—Ñ–∞–π–ª–∞ $fieldName: $e');
      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª –∏–∑ blob, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ
    }
  }

  Future<Map<String, dynamic>> getVerificationStatus() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final driverData = prefs.getString('driver_data');
      
      if (driverData == null) {
        return {
          'status': 'not_started',
          'rejection_reason': null,
        };
      }
      
      final driver = json.decode(driverData);
      final driverPhone = driver['phoneNumber'] ?? '';
      
      if (driverPhone.isEmpty) {
        return {
          'status': 'not_started',
          'rejection_reason': null,
        };
      }
      
      final url = '${ApiConfig.baseUrl}/api/photo-control/status?driver_phone=$driverPhone';
      
      final response = await http.get(Uri.parse(url));
      
      if (response.statusCode == 200) {
        final responseData = json.decode(response.body);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        await _photoStorage.setVerificationStatus(responseData['status'] ?? 'not_started');
        if (responseData['rejection_reason'] != null) {
          await _photoStorage.setRejectionReason(responseData['rejection_reason']);
        }
        
        return {
          'status': responseData['status'] ?? 'not_started',
          'rejection_reason': responseData['rejection_reason'],
        };
      }
      
      // –ï—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
      final localStatus = await _photoStorage.getVerificationStatus();
      final localReason = await _photoStorage.getRejectionReason();
      
      return {
        'status': localStatus,
        'rejection_reason': localReason,
      };
      
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: $e');
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ
      final localStatus = await _photoStorage.getVerificationStatus();
      final localReason = await _photoStorage.getRejectionReason();
      
      return {
        'status': localStatus,
        'rejection_reason': localReason,
      };
    }
  }

  Future<void> approvePhotos() async {
    try {
      await _photoStorage.setVerificationStatus('approved');
      await _photoStorage.setRejectionReason('');
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è —Ñ–æ—Ç–æ: $e');
    }
  }

  Future<void> rejectPhotos(String reason) async {
    try {
      await _photoStorage.setVerificationStatus('rejected');
      await _photoStorage.setRejectionReason(reason);
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ: $e');
    }
  }

  String getStatusText(String status) {
    switch (status) {
      case 'pending':
        return '–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ';
      case 'approved':
        return '–û–¥–æ–±—Ä–µ–Ω–æ';
      case 'rejected':
        return '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ';
      default:
        return '–ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ';
    }
  }

  Color getStatusColor(String status) {
    switch (status) {
      case 'pending':
        return const Color(0xFFFFA726);
      case 'approved':
        return const Color(0xFF4CAF50);
      case 'rejected':
        return const Color(0xFFF44336);
      default:
        return AppColors.primaryWithOpacity60;
    }
  }
}
