import 'dart:async';
import 'location_service.dart';

class NavigationService {
  static final NavigationService _instance = NavigationService._internal();
  factory NavigationService() => _instance;
  NavigationService._internal();

  bool _isNavigating = false;
  Timer? _navigationTimer;
  Map<String, dynamic>? _currentRoute;

  bool get isNavigating => _isNavigating;
  Map<String, dynamic>? get currentRoute => _currentRoute;

  void initialize(dynamic context) {
    print('‚úÖ [Navigation] –°–µ—Ä–≤–∏—Å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  Future<Map<String, dynamic>?> buildRoute(
    double startLat, double startLon,
    double endLat, double endLon,
  ) async {
    try {
      print('üîç [Navigation] –°—Ç—Ä–æ–∏–º –º–∞—Ä—à—Ä—É—Ç –æ—Ç ($startLat, $startLon) –¥–æ ($endLat, $endLon)');

      final distance = LocationService().calculateDistance(startLat, startLon, endLat, endLon);
      final duration = (distance / 50 * 60).round();

      _currentRoute = {
        'start_lat': startLat,
        'start_lon': startLon,
        'end_lat': endLat,
        'end_lon': endLon,
        'distance': distance,
        'duration': duration,
        'points': [
          {'lat': startLat, 'lon': startLon},
          {'lat': endLat, 'lon': endLon},
        ]
      };

      print('‚úÖ [Navigation] –ú–∞—Ä—à—Ä—É—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      return _currentRoute;
    } catch (e) {
      print('‚ùå [Navigation] –û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞: $e');
      return null;
    }
  }

  Future<Map<String, dynamic>?> buildRouteToClient(
    double clientLat, double clientLon,
  ) async {
    final currentPos = LocationService().currentPosition;
    if (currentPos == null) {
      print('‚ùå [Navigation] –¢–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ');
      return null;
    }

    return await buildRoute(
      currentPos.latitude,
      currentPos.longitude,
      clientLat,
      clientLon,
    );
  }

  Future<Map<String, dynamic>?> buildRouteToDestination(
    double destinationLat, double destinationLon,
  ) async {
    final currentPos = LocationService().currentPosition;
    if (currentPos == null) {
      print('‚ùå [Navigation] –¢–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ');
      return null;
    }

    return await buildRoute(
      currentPos.latitude,
      currentPos.longitude,
      destinationLat,
      destinationLon,
    );
  }

  void startNavigation() {
    if (_isNavigating || _currentRoute == null) return;

    _isNavigating = true;
    print('üîç [Navigation] –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é');

    _navigationTimer = Timer.periodic(Duration(seconds: 10), (timer) {
      _checkNavigationProgress();
    });
  }

  void stopNavigation() {
    if (!_isNavigating) return;

    _isNavigating = false;
    _navigationTimer?.cancel();
    _navigationTimer = null;
    print('üîç [Navigation] –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é');
  }

  void _checkNavigationProgress() {
    if (_currentRoute == null) return;

    final currentPos = LocationService().currentPosition;
    if (currentPos == null) return;

    try {
      final endLat = _currentRoute!['end_lat'];
      final endLon = _currentRoute!['end_lon'];
      
      final distanceToEnd = LocationService().calculateDistance(
        currentPos.latitude,
        currentPos.longitude,
        endLat,
        endLon,
      );

      print('üîç [Navigation] –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –∫–æ–Ω—Ü–∞ –º–∞—Ä—à—Ä—É—Ç–∞: ${distanceToEnd.toStringAsFixed(0)} –º');

      if (distanceToEnd < 50) {
        print('‚úÖ [Navigation] –ü—Ä–∏–±—ã–ª–∏ –≤ —Ç–æ—á–∫—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è');
        stopNavigation();
      }
    } catch (e) {
      print('‚ùå [Navigation] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: $e');
    }
  }

  double? getRouteDistance() {
    return _currentRoute?['distance'];
  }

  int? getRouteDuration() {
    return _currentRoute?['duration'];
  }

  List<Map<String, double>>? getRoutePoints() {
    return _currentRoute?['points']?.cast<Map<String, double>>();
  }

  void clearRoute() {
    _currentRoute = null;
    stopNavigation();
    print('üîç [Navigation] –ú–∞—Ä—à—Ä—É—Ç –æ—á–∏—â–µ–Ω');
  }

  void dispose() {
    stopNavigation();
  }
}