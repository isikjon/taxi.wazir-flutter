import 'dart:convert';
import 'package:http/http.dart' as http;
import '../config/api_config.dart';
import '../utils/phone_utils.dart';

class ApiService {
  static String get baseUrl => ApiConfig.baseUrl;
  
  static ApiService? _instance;
  static ApiService get instance => _instance ??= ApiService._();
  ApiService._();

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è
  Future<Map<String, dynamic>> registerDriver(Map<String, dynamic> userData) async {
    try {
      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (userData['user'] != null && userData['user']['phoneNumber'] != null) {
        final String originalPhone = userData['user']['phoneNumber'];
        final String normalizedPhone = PhoneUtils.normalizePhoneNumber(originalPhone);
        userData['user']['phoneNumber'] = normalizedPhone;
        print('üìù Registration - Original phone: $originalPhone');
        print('üìù Registration - Normalized phone: $normalizedPhone');
      }
      
      print('Sending registration data: $userData');
      
      final response = await http.post(
        Uri.parse(ApiConfig.getEndpointUrl('driver_register')),
        headers: ApiConfig.defaultHeaders,
        body: json.encode(userData),
      );

      print('Registration response status: ${response.statusCode}');
      print('Registration response body: ${response.body}');

      if (response.statusCode == 200 || response.statusCode == 201) {
        return {
          'success': true,
          'data': json.decode(response.body),
        };
      } else {
        return {
          'success': false,
          'error': '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${response.statusCode}',
          'details': response.body,
        };
      }
    } catch (e) {
      print('Registration error: $e');
      return {
        'success': false,
        'error': '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: $e',
      };
    }
  }

  // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è (–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã)
  Future<Map<String, dynamic>> loginDriver(String phoneNumber, String smsCode) async {
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    final String normalizedPhone = PhoneUtils.normalizePhoneNumber(phoneNumber);
    print('üîë Original phone: $phoneNumber');
    print('üîë Normalized phone: $normalizedPhone');
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ª–æ–≥–∏–Ω–∞
    final List<Map<String, dynamic>> loginEndpoints = [
      {'path': '/api/drivers/login', 'params': {'phoneNumber': normalizedPhone, 'smsCode': smsCode}},
    ];

    for (Map<String, dynamic> config in loginEndpoints) {
      try {
        final String endpoint = config['path'];
        final Map<String, dynamic> params = config['params'];
        
        print('üîë Trying login endpoint: ${ApiConfig.baseUrl}$endpoint');
        print('üîë Login attempt for: $normalizedPhone with code: $smsCode');
        print('üîë Using params: $params');
        
        final response = await http.post(
          Uri.parse('${ApiConfig.baseUrl}$endpoint'),
          headers: ApiConfig.defaultHeaders,
          body: json.encode(params),
        );

        print('üîë Login [$endpoint] status: ${response.statusCode}');
        print('üîë Login [$endpoint] body: ${response.body}');

        if (response.statusCode == 200 || response.statusCode == 201) {
          print('‚úÖ –õ–æ–≥–∏–Ω —É—Å–ø–µ—à–µ–Ω —á–µ—Ä–µ–∑: $endpoint');
          final data = json.decode(response.body);
          return {
            'success': true,
            'data': data,
            'isNewUser': data['isNewUser'] ?? data['is_new_user'] ?? false,
            'endpoint': endpoint,
          };
        } else if (response.statusCode != 404) {
          // –ï—Å–ª–∏ –Ω–µ 404, –∑–Ω–∞—á–∏—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç –Ω–∞–π–¥–µ–Ω, –Ω–æ –µ—Å—Ç—å –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
          return {
            'success': false,
            'error': '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ [$endpoint]: ${response.statusCode}',
            'details': response.body,
            'endpoint': endpoint,
          };
        }
      } catch (e) {
        print('‚ùå Login error [${config['path']}]: $e');
        continue;
      }
    }
    
    return {
      'success': false,
      'error': '–ù–µ –Ω–∞–π–¥–µ–Ω —Ä–∞–±–æ—á–∏–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é API.',
    };
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ SMS –∫–æ–¥–∞ (–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã)
  Future<Map<String, dynamic>> sendSmsCode(String phoneNumber) async {
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    final String normalizedPhone = PhoneUtils.normalizePhoneNumber(phoneNumber);
    print('üì± Original phone: $phoneNumber');
    print('üì± Normalized phone: $normalizedPhone');
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è SMS
    final List<String> smsEndpoints = [
      '/api/sms/send',
    ];

    for (String endpoint in smsEndpoints) {
      try {
        print('üì± Trying SMS endpoint: ${ApiConfig.baseUrl}$endpoint');
        print('üì± Sending SMS to: $normalizedPhone');
        
        final response = await http.post(
          Uri.parse('${ApiConfig.baseUrl}$endpoint'),
          headers: ApiConfig.defaultHeaders,
          body: json.encode({
            'phoneNumber': normalizedPhone,
          }),
        );

        print('üì± SMS [$endpoint] status: ${response.statusCode}');
        print('üì± SMS [$endpoint] body: ${response.body}');

        if (response.statusCode == 200 || response.statusCode == 201) {
          print('‚úÖ SMS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑: $endpoint');
          return {
            'success': true,
            'data': response.body.isNotEmpty ? json.decode(response.body) : {'status': 'sent'},
            'endpoint': endpoint,
          };
        } else if (response.statusCode != 404) {
          // –ï—Å–ª–∏ –Ω–µ 404, –∑–Ω–∞—á–∏—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç –Ω–∞–π–¥–µ–Ω, –Ω–æ –µ—Å—Ç—å –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
          return {
            'success': false,
            'error': '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS [$endpoint]: ${response.statusCode}',
            'details': response.body,
            'endpoint': endpoint,
          };
        }
      } catch (e) {
        print('‚ùå SMS error [$endpoint]: $e');
        continue;
      }
    }
    
    return {
      'success': false,
      'error': '–ù–µ –Ω–∞–π–¥–µ–Ω —Ä–∞–±–æ—á–∏–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è SMS. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é API.',
    };
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∞–∫—Å–æ–ø–∞—Ä–∫–æ–≤
  Future<Map<String, dynamic>> getParks() async {
    try {
      print('Fetching parks list');
      
      final response = await http.get(
        Uri.parse(ApiConfig.getEndpointUrl('taxiparks')),
        headers: ApiConfig.defaultHeaders,
      );

      print('Parks response status: ${response.statusCode}');
      print('Parks response body: ${response.body}');

      if (response.statusCode == 200) {
        return {
          'success': true,
          'data': json.decode(response.body),
        };
      } else {
        return {
          'success': false,
          'error': '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞—Ä–∫–æ–≤: ${response.statusCode}',
          'details': response.body,
        };
      }
    } catch (e) {
      print('Parks fetch error: $e');
      return {
        'success': false,
        'error': '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: $e',
      };
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å SMS
  Future<Map<String, dynamic>> checkSmsStatus(String phoneNumber) async {
    try {
      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
      final String normalizedPhone = PhoneUtils.normalizePhoneNumber(phoneNumber);
      print('üì± SMS Status - Original phone: $phoneNumber');
      print('üì± SMS Status - Normalized phone: $normalizedPhone');
      
      final response = await http.get(
        Uri.parse('${ApiConfig.getEndpointUrl('sms_status')}?phoneNumber=$normalizedPhone'),
        headers: ApiConfig.defaultHeaders,
      );

      print('SMS Status response status: ${response.statusCode}');
      print('SMS Status response body: ${response.body}');

      if (response.statusCode == 200) {
        return {
          'success': true,
          'data': json.decode(response.body),
        };
      } else {
        return {
          'success': false,
          'error': '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ SMS: ${response.statusCode}',
          'details': response.body,
        };
      }
    } catch (e) {
      print('SMS Status check error: $e');
      return {
        'success': false,
        'error': '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: $e',
      };
    }
  }

  // –¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É
  Future<Map<String, dynamic>> testConnection() async {
    try {
      print('üì∂ Testing connection to server: $baseUrl');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é API
      final docsResponse = await http.get(
        Uri.parse('$baseUrl/docs'),
        headers: ApiConfig.defaultHeaders,
      ).timeout(ApiConfig.connectionTimeout);
      
      print('üì∂ Docs endpoint status: ${docsResponse.statusCode}');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
      final rootResponse = await http.get(
        Uri.parse(baseUrl),
        headers: ApiConfig.defaultHeaders,
      ).timeout(ApiConfig.connectionTimeout);
      
      print('üì∂ Root endpoint status: ${rootResponse.statusCode}');
      print('üì∂ Root response: ${rootResponse.body.substring(0, rootResponse.body.length > 200 ? 200 : rootResponse.body.length)}...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º openapi.json –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
      try {
        final openapiResponse = await http.get(
          Uri.parse('$baseUrl/openapi.json'),
          headers: ApiConfig.defaultHeaders,
        ).timeout(ApiConfig.connectionTimeout);
        
        if (openapiResponse.statusCode == 200) {
          print('üì∂ OpenAPI spec found! Parsing endpoints...');
          final apiSpec = json.decode(openapiResponse.body);
          final paths = apiSpec['paths'] as Map<String, dynamic>?;
          if (paths != null) {
            print('üì∂ Available API endpoints:');
            paths.keys.take(10).forEach((path) {
              print('  - $path');
            });
          }
        }
      } catch (e) {
        print('üì∂ No OpenAPI spec found: $e');
      }

      if (rootResponse.statusCode == 200 || docsResponse.statusCode == 200) {
        return {
          'success': true,
          'data': {
            'status': 'Connected',
            'server': baseUrl,
            'docs_available': docsResponse.statusCode == 200,
            'root_status': rootResponse.statusCode,
          },
        };
      } else {
        return {
          'success': false,
          'error': '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: Root(${rootResponse.statusCode}), Docs(${docsResponse.statusCode})',
        };
      }
    } catch (e) {
      print('üì∂ Connection test error: $e');
      return {
        'success': false,
        'error': '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: $e',
      };
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∞–∫—Å–æ–ø–∞—Ä–∫–æ–≤ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã)
  Future<Map<String, dynamic>> getTaxiparks() async {
    try {
      print('Fetching taxiparks list from new API');
      
      final response = await http.get(
        Uri.parse(ApiConfig.getEndpointUrl('taxiparks')),
        headers: ApiConfig.defaultHeaders,
      );

      print('Taxiparks response status: ${response.statusCode}');
      print('Taxiparks response body: ${response.body}');

      if (response.statusCode == 200) {
        return {
          'success': true,
          'data': json.decode(response.body),
        };
      } else {
        return {
          'success': false,
          'error': '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–∫—Å–æ–ø–∞—Ä–∫–æ–≤: ${response.statusCode}',
          'details': response.body,
        };
      }
    } catch (e) {
      print('Taxiparks fetch error: $e');
      return {
        'success': false,
        'error': '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: $e',
      };
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ API –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
  static Future<void> printApiInfo() async {
    print('\nüåê =============== API INFO ===============');
    print('üåê Base URL: ${ApiConfig.baseUrl}');
    print('üåê Environment: ${ApiConfig.currentEnvironment}');
    print('üåê Documentation: ${ApiConfig.baseUrl}/docs');
    print('üåê Available endpoints:');
    
    ApiConfig.endpoints.forEach((key, value) {
      print('  - $key: ${ApiConfig.baseUrl}$value');
    });
    
    print('üåê ==========================================\n');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    final testResult = await ApiService.instance.testConnection();
    if (testResult['success']) {
      print('‚úÖ Server connection: OK');
    } else {
      print('‚ùå Server connection failed: ${testResult['error']}');
    }
    print('');
  }
}