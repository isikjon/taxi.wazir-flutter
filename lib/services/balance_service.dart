import 'dart:convert';
import 'package:http/http.dart' as http;
import '../config/api_config.dart';
import 'auth_service.dart';
import '../utils/phone_utils.dart';

class BalanceService {
  static BalanceService? _instance;
  static BalanceService get instance => _instance ??= BalanceService._();
  BalanceService._();

  Future<Map<String, dynamic>> getDriverBalance([String? phoneNumber]) async {
    try {
      // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –ø–æ–ª—É—á–∞–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      if (phoneNumber == null) {
        final driverData = await AuthService.getCurrentDriver();
        if (driverData == null) {
          return {
            'success': false,
            'error': '–í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω',
          };
        }
        phoneNumber = driverData['phoneNumber'];
      }

      final String normalizedPhone = PhoneUtils.normalizePhoneNumber(phoneNumber!);
      print('üí∞ –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è: $normalizedPhone');

      final encodedPhone = Uri.encodeComponent(normalizedPhone);
      final response = await http.get(
        Uri.parse('${ApiConfig.baseUrl}/api/drivers/balance?phoneNumber=$encodedPhone'),
        headers: ApiConfig.defaultHeaders,
      );

      print('üí∞ Balance response status: ${response.statusCode}');
      print('üí∞ Balance response body: ${response.body}');

      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        return {
          'success': true,
          'data': data,
        };
      } else {
        return {
          'success': false,
          'error': '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: ${response.statusCode}',
          'details': response.body,
        };
      }
    } catch (e) {
      print('üí∞ Balance fetch error: $e');
      return {
        'success': false,
        'error': '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: $e',
      };
    }
  }

  Future<Map<String, dynamic>> getDriverTransactions({
    String filter = 'all',
    int page = 1,
    int limit = 20,
  }) async {
    try {
      final driverData = await AuthService.getCurrentDriver();
      if (driverData == null) {
        return {
          'success': false,
          'error': '–í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω',
        };
      }

      final phoneNumber = driverData['phoneNumber'];
      final String normalizedPhone = PhoneUtils.normalizePhoneNumber(phoneNumber);
      print('üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è: $normalizedPhone, —Ñ–∏–ª—å—Ç—Ä: $filter');

      String endpoint = '${ApiConfig.baseUrl}/api/drivers/transactions';
      Map<String, String> queryParams = {
        'phoneNumber': normalizedPhone,
        'page': page.toString(),
        'limit': limit.toString(),
      };

      if (filter != 'all') {
        queryParams['filter'] = filter;
      }

      final uri = Uri.parse(endpoint).replace(queryParameters: queryParams);
      
      final response = await http.get(
        uri,
        headers: ApiConfig.defaultHeaders,
      );

      print('üìä Transactions response status: ${response.statusCode}');
      print('üìä Transactions response body: ${response.body}');

      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        return {
          'success': true,
          'data': data,
        };
      } else {
        return {
          'success': false,
          'error': '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${response.statusCode}',
          'details': response.body,
        };
      }
    } catch (e) {
      print('üìä Transactions fetch error: $e');
      return {
        'success': false,
        'error': '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: $e',
      };
    }
  }

  Future<Map<String, dynamic>> getDriverStats() async {
    try {
      final driverData = await AuthService.getCurrentDriver();
      if (driverData == null) {
        return {
          'success': false,
          'error': '–í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω',
        };
      }

      final phoneNumber = driverData['phoneNumber'];
      final String normalizedPhone = PhoneUtils.normalizePhoneNumber(phoneNumber);
      print('üìà –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è: $normalizedPhone');

      final encodedPhone = Uri.encodeComponent(normalizedPhone);
      final response = await http.get(
        Uri.parse('${ApiConfig.baseUrl}/api/drivers/stats?phoneNumber=$encodedPhone'),
        headers: ApiConfig.defaultHeaders,
      );

      print('üìà Stats response status: ${response.statusCode}');
      print('üìà Stats response body: ${response.body}');

      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        return {
          'success': true,
          'data': data,
        };
      } else {
        return {
          'success': false,
          'error': '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${response.statusCode}',
          'details': response.body,
        };
      }
    } catch (e) {
      print('üìà Stats fetch error: $e');
      return {
        'success': false,
        'error': '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: $e',
      };
    }
  }

  Future<Map<String, dynamic>> requestBalanceTopup(double amount) async {
    try {
      final driverData = await AuthService.getCurrentDriver();
      if (driverData == null) {
        return {
          'success': false,
          'error': '–í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω',
        };
      }

      final phoneNumber = driverData['phoneNumber'];
      print('üí≥ –ó–∞–ø—Ä–æ—Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: $amount —Å–æ–º –¥–ª—è $phoneNumber');

      final response = await http.post(
        Uri.parse('${ApiConfig.baseUrl}/api/drivers/balance/topup'),
        headers: ApiConfig.defaultHeaders,
        body: json.encode({
          'phoneNumber': phoneNumber,
          'amount': amount,
        }),
      );

      print('üí≥ Topup response status: ${response.statusCode}');
      print('üí≥ Topup response body: ${response.body}');

      if (response.statusCode == 200 || response.statusCode == 201) {
        final data = json.decode(response.body);
        return {
          'success': true,
          'data': data,
        };
      } else {
        return {
          'success': false,
          'error': '–û—à–∏–±–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: ${response.statusCode}',
          'details': response.body,
        };
      }
    } catch (e) {
      print('üí≥ Topup error: $e');
      return {
        'success': false,
        'error': '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: $e',
      };
    }
  }

  static Future<void> printBalanceApiInfo() async {
    print('\nüí∞ =============== BALANCE API INFO ===============');
    print('üí∞ Base URL: ${ApiConfig.baseUrl}');
    print('üí∞ Available balance endpoints:');
    print('  - GET /api/drivers/balance?phoneNumber={phone}');
    print('  - GET /api/drivers/transactions?phoneNumber={phone}&filter={filter}');
    print('  - GET /api/drivers/stats?phoneNumber={phone}');
    print('  - POST /api/drivers/balance/topup');
    print('üí∞ ================================================\n');
  }
}
