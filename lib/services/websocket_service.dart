import 'dart:convert';
import 'dart:async';
import 'dart:io';
import 'package:shared_preferences/shared_preferences.dart';
import 'order_service.dart';

class WebSocketService {
  static final WebSocketService _instance = WebSocketService._internal();
  factory WebSocketService() => _instance;
  WebSocketService._internal();

  WebSocket? _webSocket;
  Timer? _reconnectTimer;
  bool _isConnected = false;
  int _reconnectAttempts = 0;
  static const int _maxReconnectAttempts = 5;

  StreamController<Map<String, dynamic>> _messageController = StreamController.broadcast();
  Stream<Map<String, dynamic>> get messageStream => _messageController.stream;

  bool get isConnected => _isConnected;

  Future<void> connect() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final driverData = prefs.getString('driver_data');
      
      if (driverData == null) {
        print('‚ùå [WebSocket] –î–∞–Ω–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return;
      }

      final driver = json.decode(driverData);
      final driverId = driver['id'];
      
      print('üîç [WebSocket] –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è: $driverId');

      final wsUrl = 'ws://new.superadmin.taxi.wazir.kg/ws/orders/driver/$driverId';
      print('üîç [WebSocket] URL: $wsUrl');
      
      _webSocket = await WebSocket.connect(wsUrl);
      _isConnected = true;
      _reconnectAttempts = 0;
      
      print('‚úÖ [WebSocket] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
      
      _webSocket!.listen(
        _handleMessage,
        onError: _handleError,
        onDone: _handleDisconnection,
      );
      
    } catch (e) {
      print('‚ùå [WebSocket] –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: $e');
      _scheduleReconnect();
    }
  }

  void _handleMessage(dynamic message) {
    try {
      print('üîç [WebSocket] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: $message');
      
      final data = json.decode(message);
      print('üîç [WebSocket] –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö: $data');
      
      if (data['type'] == 'new_order') {
        print('üîç [WebSocket] –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –ø–æ–ª—É—á–µ–Ω');
        final orderData = data['data'];
        OrderService().setCurrentOrder(orderData);
      } else if (data['type'] == 'order_status_update') {
        print('üîç [WebSocket] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞');
        final orderData = data['data'];
        OrderService().setCurrentOrder(orderData);
      }
      
      _messageController.add(data);
    } catch (e) {
      print('‚ùå [WebSocket] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: $e');
    }
  }

  void _handleError(dynamic error) {
    print('‚ùå [WebSocket] –û—à–∏–±–∫–∞ WebSocket: $error');
    _isConnected = false;
    _scheduleReconnect();
  }

  void _handleDisconnection() {
    print('üîç [WebSocket] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
    _isConnected = false;
    _scheduleReconnect();
  }

  void _scheduleReconnect() {
    if (_reconnectAttempts >= _maxReconnectAttempts) {
      print('‚ùå [WebSocket] –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
      return;
    }

    _reconnectAttempts++;
    final delay = Duration(seconds: _reconnectAttempts * 2);
    
    print('üîç [WebSocket] –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ${delay.inSeconds} —Å–µ–∫—É–Ω–¥ (–ø–æ–ø—ã—Ç–∫–∞ $_reconnectAttempts/$_maxReconnectAttempts)');
    
    _reconnectTimer?.cancel();
    _reconnectTimer = Timer(delay, () {
      connect();
    });
  }

  void sendMessage(Map<String, dynamic> message) {
    if (_webSocket != null && _isConnected) {
      try {
        _webSocket!.add(json.encode(message));
        print('üîç [WebSocket] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: $message');
      } catch (e) {
        print('‚ùå [WebSocket] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: $e');
      }
    } else {
      print('‚ùå [WebSocket] WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
    }
  }

  void disconnect() {
    print('üîç [WebSocket] –û—Ç–∫–ª—é—á–µ–Ω–∏–µ WebSocket');
    _reconnectTimer?.cancel();
    _webSocket?.close();
    _isConnected = false;
  }


  void dispose() {
    disconnect();
    _messageController.close();
  }
}
