import 'dart:async';
import 'package:flutter/material.dart';
import 'package:dgis_mobile_sdk_full/dgis.dart' as sdk;
import 'package:geolocator/geolocator.dart';
import '../../main.dart' show sdkContext;
import '../../styles/app_colors.dart';
import '../../services/driver_status_service.dart';

class OnlineNavigationScreen extends StatefulWidget {
  const OnlineNavigationScreen({super.key});

  @override
  State<OnlineNavigationScreen> createState() => _OnlineNavigationScreenState();
}

class _OnlineNavigationScreenState extends State<OnlineNavigationScreen> with WidgetsBindingObserver {
  late sdk.MapWidgetController _mapController;
  sdk.Map? _map;
  sdk.NavigationManager? _navigationManager;
  sdk.MyLocationMapObjectSource? _locationSource;
  
  // –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã –¥–ª—è –≤–∏–¥–∂–µ—Ç–æ–≤ 2–ì–ò–°
  sdk.ManeuverController? _maneuverController;
  sdk.SpeedLimitController? _speedLimitController;
  sdk.ZoomController? _zoomController;
  sdk.CompassController? _compassController;
  sdk.MyLocationController? _myLocationController;
  sdk.DashboardController? _dashboardController;
  sdk.TrafficLineController? _trafficLineController;
  sdk.TrafficController? _trafficController;
  sdk.ParkingController? _parkingController;
  
  bool _isNavigationActive = false;
  bool _isLocationPermissionGranted = false;
  bool _areWidgetsReady = false;
  String _currentStatus = '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...';
  bool _isFreeRoamActive = false;
  bool _isOnline = false;

  // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  sdk.TrafficRouter? _trafficRouter;
  sdk.RouteMapObjectSource? _routeSource;
  
  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
  final List<String> _logs = [];
  
  // Heartbeat –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  Timer? _heartbeatTimer;
  
  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addObserver(this);
    _addLog('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏');
    _goOnline();
    _initializeMap();
  }

  @override
  void dispose() {
    WidgetsBinding.instance.removeObserver(this);
    _heartbeatTimer?.cancel();
    _addLog('üîÑ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤');
    _goOffline();
    if (_navigationManager != null && _isNavigationActive) {
      _navigationManager!.stop();
    }
    super.dispose();
  }

  @override
  void didChangeAppLifecycleState(AppLifecycleState state) {
    super.didChangeAppLifecycleState(state);
    switch (state) {
      case AppLifecycleState.paused:
      case AppLifecycleState.detached:
      case AppLifecycleState.inactive:
      case AppLifecycleState.hidden:
        _addLog('üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–≤–µ—Ä–Ω—É—Ç–æ/–∑–∞–∫—Ä—ã—Ç–æ - –≤—ã—Ö–æ–¥ —Å –ª–∏–Ω–∏–∏');
        _goOffline();
        break;
      case AppLifecycleState.resumed:
        if (_isOnline) {
          _addLog('üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ - –≤–æ–∑–≤—Ä–∞—Ç –Ω–∞ –ª–∏–Ω–∏—é');
          _goOnline();
        }
        break;
    }
  }

  void _addLog(String message) {
    final timestamp = DateTime.now().toIso8601String().substring(11, 19);
    final logMessage = '[$timestamp] $message';
    print(logMessage);
    
    if (mounted) {
      setState(() {
        _logs.add(logMessage);
        if (_logs.length > 50) {
          _logs.removeAt(0);
        }
      });
    }
  }

  void _updateStatus(String status) {
    if (mounted) {
      setState(() {
        _currentStatus = status;
      });
    }
    _addLog('üìä –°—Ç–∞—Ç—É—Å: $status');
  }

  Future<void> _goOnline() async {
    if (_isOnline) return;
    
    try {
      _addLog('üü¢ –í—ã—Ö–æ–¥ –Ω–∞ –ª–∏–Ω–∏—é...');
      final result = await DriverStatusService().goOnline();
      if (result['success']) {
        setState(() {
          _isOnline = true;
        });
        _addLog('‚úÖ –°—Ç–∞—Ç—É—Å "–Ω–∞ –ª–∏–Ω–∏–∏" —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        _startHeartbeat();
      } else {
        _addLog('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: ${result['error']}');
      }
    } catch (e) {
      _addLog('‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞ –Ω–∞ –ª–∏–Ω–∏—é: $e');
    }
  }

  Future<void> _goOffline() async {
    if (!_isOnline) return;
    
    try {
      _heartbeatTimer?.cancel();
      _addLog('üî¥ –í—ã—Ö–æ–¥ —Å –ª–∏–Ω–∏–∏...');
      final result = await DriverStatusService().goOffline();
      if (result['success']) {
        setState(() {
          _isOnline = false;
        });
        _addLog('‚úÖ –°—Ç–∞—Ç—É—Å "—Å –ª–∏–Ω–∏–∏" —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      } else {
        _addLog('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: ${result['error']}');
      }
    } catch (e) {
      _addLog('‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞ —Å –ª–∏–Ω–∏–∏: $e');
    }
  }

  void _startHeartbeat() {
    _heartbeatTimer?.cancel();
    _heartbeatTimer = Timer.periodic(const Duration(seconds: 30), (timer) {
      if (_isOnline) {
        _addLog('üíì Heartbeat - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏');
        DriverStatusService().goOnline();
      } else {
        timer.cancel();
      }
    });
  }

  Future<void> _initializeMap() async {
    try {
      _addLog('üó∫Ô∏è –ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã');
      _updateStatus('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã...');
      
      _mapController = sdk.MapWidgetController();
      _addLog('‚úÖ MapWidgetController —Å–æ–∑–¥–∞–Ω');
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã
      bool mapReceived = false;
      
      _mapController.getMapAsync((map) {
        if (!mapReceived) {
          mapReceived = true;
          _addLog('üéØ –ö–∞—Ä—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞: —É—Å–ø–µ—à–Ω–æ');
          _map = map;
          _setupMapSources();
        }
      });
      
      // –¢–∞–π–º–∞—É—Ç 10 —Å–µ–∫—É–Ω–¥
      await Future.delayed(const Duration(seconds: 10));
      if (!mapReceived) {
        _addLog('‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∫–∞—Ä—Ç—ã');
        _updateStatus('–ö–∞—Ä—Ç–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
      }
      
    } catch (e) {
      _addLog('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã: $e');
      _updateStatus('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã');
    }
  }

  Future<void> _setupMapSources() async {
    if (_map == null) {
      _addLog('‚ùå –ö–∞—Ä—Ç–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
      return;
    }

    try {
      _addLog('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∫–∞—Ä—Ç—ã');
      _updateStatus('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞—Ä—Ç—ã...');
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
      _locationSource = sdk.MyLocationMapObjectSource(sdkContext);
      _map!.addSource(_locationSource!);
      _addLog('‚úÖ –ò—Å—Ç–æ—á–Ω–∏–∫ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω');
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TrafficRouter –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤
      _trafficRouter = sdk.TrafficRouter(sdkContext);
      _routeSource = sdk.RouteMapObjectSource(sdkContext, sdk.RouteVisualizationType.normal);
      _map!.addSource(_routeSource!);
      _addLog('‚úÖ TrafficRouter –∏ RouteSource –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è NavigationManager
      _initializeNavigationManager();
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
      _checkLocationPermissions();
      
      // –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã
      _centerMapOnCurrentLocation();
      
      
      _addLog('‚úÖ –ö–∞—Ä—Ç–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∏–¥–∂–µ—Ç—ã –ø–æ—Å–ª–µ –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
      Future.delayed(const Duration(milliseconds: 1000), () {
        _initializeWidgets();
      });
      
      _updateStatus('–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
      
    } catch (e) {
      _addLog('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∫–∞—Ä—Ç—ã: $e');
      _updateStatus('–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Ä—Ç—ã');
    }
  }

  Future<void> _initializeNavigationManager() async {
    try {
      _addLog('üß≠ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è NavigationManager');
      
      _navigationManager = sdk.NavigationManager(sdkContext);
      _addLog('‚úÖ NavigationManager —Å–æ–∑–¥–∞–Ω');
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –≤ NavigationManager —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–∞—Ä—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
      if (_map != null) {
        _navigationManager!.mapManager.addMap(_map!);
        _addLog('‚úÖ –ö–∞—Ä—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ NavigationManager');
      } else {
        _addLog('‚ö†Ô∏è –ö–∞—Ä—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è NavigationManager');
      }
      
      _addLog('‚úÖ NavigationManager –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–∂–∏–º —Å–≤–æ–±–æ–¥–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
      _startFreeRoam();
      
    } catch (e) {
      _addLog('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ NavigationManager: $e');
      // –ù–µ –±—Ä–æ—Å–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
    }
  }

  void _startFreeRoam() {
    try {
      if (_navigationManager != null) {
        _navigationManager!.startFreeRoam();
        _isFreeRoamActive = true;
        _addLog('‚úÖ –†–µ–∂–∏–º —Å–≤–æ–±–æ–¥–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∑–∞–ø—É—â–µ–Ω');
        _updateStatus('–°–≤–æ–±–æ–¥–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞');
      }
    } catch (e) {
      _addLog('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: $e');
    }
  }

  Future<void> _checkLocationPermissions() async {
    try {
      _addLog('üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é');
      
      bool serviceEnabled = await Geolocator.isLocationServiceEnabled();
      _addLog('üìç –°–µ—Ä–≤–∏—Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏: ${serviceEnabled ? "–≤–∫–ª—é—á–µ–Ω" : "–æ—Ç–∫–ª—é—á–µ–Ω"}');
      
      if (!serviceEnabled) {
        _addLog('‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω');
        _updateStatus('–í–∫–ª—é—á–∏—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é');
        return;
      }

      LocationPermission permission = await Geolocator.checkPermission();
      _addLog('üîë –¢–µ–∫—É—â–µ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ: $permission');
      
      if (permission == LocationPermission.denied) {
        _addLog('üìù –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é');
        permission = await Geolocator.requestPermission();
        _addLog('üîë –ù–æ–≤–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ: $permission');
      }

      if (permission == LocationPermission.deniedForever) {
        _addLog('‚ùå –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –Ω–∞–≤—Å–µ–≥–¥–∞');
        _updateStatus('–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ');
        return;
      }

      if (permission == LocationPermission.whileInUse || permission == LocationPermission.always) {
        setState(() {
          _isLocationPermissionGranted = true;
        });
        _addLog('‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–æ');
      }
      
    } catch (e) {
      _addLog('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π: $e');
    }
  }

  Future<void> _centerMapOnCurrentLocation() async {
    if (!_isLocationPermissionGranted || _map == null) {
      _addLog('‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É - –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –∏–ª–∏ –∫–∞—Ä—Ç–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
      return;
    }

    try {
      _addLog('üéØ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è');
      
      Position position = await Geolocator.getCurrentPosition(
        desiredAccuracy: LocationAccuracy.high,
      );
      
      _addLog('üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${position.latitude}, ${position.longitude}');
      
      final camera = _map!.camera;
      await camera.move(
        sdk.GeoPoint(
          latitude: sdk.Latitude(position.latitude),
          longitude: sdk.Longitude(position.longitude),
        ),
        sdk.Zoom(16.0),
        sdk.Tilt(0.0),
        sdk.Bearing(0.0),
      );
      
      _addLog('‚úÖ –ö–∞—Ä—Ç–∞ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ —Ç–µ–∫—É—â–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏');
      
    } catch (e) {
      _addLog('‚ùå –û—à–∏–±–∫–∞ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã: $e');
      // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –Ω–∞ –ë–∏—à–∫–µ–∫–µ –∫–∞–∫ fallback
      await _centerMapOnBishkek();
    }
  }

  Future<void> _centerMapOnBishkek() async {
    try {
      _addLog('üèôÔ∏è –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –ë–∏—à–∫–µ–∫–µ (fallback)');
      
      final camera = _map!.camera;
      await camera.move(
        sdk.GeoPoint(
          latitude: sdk.Latitude(42.8746),
          longitude: sdk.Longitude(74.5698),
        ),
        sdk.Zoom(12.0),
        sdk.Tilt(0.0),
        sdk.Bearing(0.0),
      );
      
      _addLog('‚úÖ –ö–∞—Ä—Ç–∞ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ –ë–∏—à–∫–µ–∫–µ');
      
    } catch (e) {
      _addLog('‚ùå –û—à–∏–±–∫–∞ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –ë–∏—à–∫–µ–∫–µ: $e');
    }
  }

  void _initializeWidgets() {
    try {
      _addLog('üéõÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è 2GIS –≤–∏–¥–∂–µ—Ç–æ–≤');
      
      if (_navigationManager != null && _map != null) {
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã –¥–ª—è –≤–∏–¥–∂–µ—Ç–æ–≤ 2–ì–ò–°
        _maneuverController = sdk.ManeuverController(navigationManager: _navigationManager!);
        _speedLimitController = sdk.SpeedLimitController(navigationManager: _navigationManager!);
        _zoomController = sdk.ZoomController(map: _map!);
        _compassController = sdk.CompassController(map: _map!);
        _myLocationController = sdk.MyLocationController(map: _map!);
        _dashboardController = sdk.DashboardController(navigationManager: _navigationManager!, map: _map!);
        _trafficLineController = sdk.TrafficLineController(navigationManager: _navigationManager!);
        _trafficController = sdk.TrafficController(map: _map!);
        _parkingController = sdk.ParkingController(map: _map!);
        
        _addLog('‚úÖ –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã –≤–∏–¥–∂–µ—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω—ã');
      }
      
      setState(() {
        _areWidgetsReady = true;
      });
      
      _addLog('‚úÖ 2GIS –≤–∏–¥–∂–µ—Ç—ã –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ');
      
    } catch (e) {
      _addLog('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–∏–¥–∂–µ—Ç–æ–≤: $e');
    }
  }






  @override
  Widget build(BuildContext context) {
    return WillPopScope(
      onWillPop: () async {
        _addLog('üîô –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –Ω–∞–∂–∞—Ç–∞ - –≤—ã—Ö–æ–¥ —Å –ª–∏–Ω–∏–∏');
        await _goOffline();
        return true;
      },
      child: MaterialApp(
        theme: ThemeData(
          colorScheme: const ColorScheme.light(
            primary: AppColors.primary,
            secondary: AppColors.primary,
            surface: Colors.white,
            background: Colors.white,
            error: Colors.red,
            onPrimary: Colors.white,
            onSecondary: Colors.white,
            onSurface: Colors.black,
            onBackground: Colors.black,
            onError: Colors.white,
          ),
          useMaterial3: true,
        ),
        home: Scaffold(
        body: Stack(
        children: [
          // 2GIS –∫–∞—Ä—Ç–∞ –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω —Å –≤–∏–¥–∂–µ—Ç–∞–º–∏
          sdk.MapWidget(
            sdkContext: sdkContext,
            controller: _mapController,
            mapOptions: sdk.MapOptions(
              position: sdk.CameraPosition(
                point: sdk.GeoPoint(
                  latitude: sdk.Latitude(42.8746), // –ë–∏—à–∫–µ–∫
                  longitude: sdk.Longitude(74.5698),
                ),
                zoom: sdk.Zoom(12.0),
              ),
            ),
            child: Stack(
              children: [
                // –í–∏–¥–∂–µ—Ç—ã 2–ì–ò–° –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                if (_areWidgetsReady) ...[
                  // 1. ManeuverWidget –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–ª–µ–¥—É—é—â–µ–º –º–∞–Ω—ë–≤—Ä–µ
                  if (_maneuverController != null)
                    Positioned(
                      top: MediaQuery.of(context).padding.top + 80,
                      left: 16,
                      child: sdk.ManeuverWidget(
                        controller: _maneuverController!,
                      ),
                    ),
                  
                  // 2. SpeedLimitWidget –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ —Å–∫–æ—Ä–æ—Å—Ç–Ω–æ–≥–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
                  if (_speedLimitController != null)
                    Positioned(
                      top: MediaQuery.of(context).padding.top + 140,
                      right: 16,
                      child: sdk.SpeedLimitWidget(
                        controller: _speedLimitController!,
                      ),
                    ),
                  
                  // 3. NavigationZoomWidget –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã
                  if (_zoomController != null)
                    Positioned(
                      bottom: 220,
                      right: 16,
                      child: sdk.NavigationZoomWidget(
                        controller: _zoomController!,
                      ),
                    ),
                  
                  // 4. NavigationCompassWidget –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–≥–ª–∞ –ø–æ–≤–æ—Ä–æ—Ç–∞ –∫–∞—Ä—Ç—ã
                  if (_compassController != null)
                    Positioned(
                      bottom: 340,
                      right: 16,
                      child: sdk.NavigationCompassWidget(
                        controller: _compassController!,
                      ),
                    ),
                  
                  // 5. NavigationMyLocationWidget –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ª–µ–∂–µ–Ω–∏–µ–º –∑–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º
                  if (_myLocationController != null)
                    Positioned(
                      bottom: 400,
                      right: 16,
                      child: sdk.NavigationMyLocationWidget(
                        controller: _myLocationController!,
                      ),
                    ),
                  
                  // 6. TrafficLineWidget –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –ø—Ä–æ–±–æ–∫ –Ω–∞ –º–∞—Ä—à—Ä—É—Ç–µ
                  if (_trafficLineController != null)
                    Positioned(
                      bottom: 140,
                      left: 16,
                      child: sdk.TrafficLineWidget(
                        controller: _trafficLineController!,
                      ),
                    ),
                  
                  // 7. DashboardWidget –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ —Ä–µ–∂–∏–º–µ —Å–≤–æ–±–æ–¥–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                  if (_dashboardController != null)
                    Positioned(
                      bottom: 20,
                      left: 20,
                      right: 20,
                      child: Container(
                        constraints: const BoxConstraints(
                          minHeight: 60,
                          maxHeight: 120,
                        ),
                        child: sdk.DashboardWidget(
                          controller: _dashboardController!,
                          onHeaderChangeSize: (size) {},
                        ),
                      ),
                    ),
                  
                  // 8. NavigationTrafficWidget –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç—å—é –ø—Ä–æ–±–æ–∫ –Ω–∞ –∫–∞—Ä—Ç–µ
                  if (_trafficController != null)
                    Positioned(
                      top: MediaQuery.of(context).padding.top + 260,
                      left: 16,
                      child: sdk.NavigationTrafficWidget(
                        controller: _trafficController!,
                      ),
                    ),
                  
                  // 9. NavigationParkingWidget –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç—å—é –ø–∞—Ä–∫–æ–≤–æ–∫ –Ω–∞ –∫–∞—Ä—Ç–µ
                  if (_parkingController != null)
                    Positioned(
                      top: MediaQuery.of(context).padding.top + 320,
                      left: 16,
                      child: sdk.NavigationParkingWidget(
                        controller: _parkingController!,
                      ),
                    ),
                ],
              ],
            ),
          ),
          
          // –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
          Positioned(
            top: MediaQuery.of(context).padding.top + 16,
            right: 16,
            child: Container(
              decoration: BoxDecoration(
                color: Colors.white,
                borderRadius: BorderRadius.circular(8),
                boxShadow: [
                  BoxShadow(
                    color: Colors.black.withOpacity(0.1),
                    blurRadius: 4,
                    offset: const Offset(0, 2),
                  ),
                ],
              ),
              child: IconButton(
                onPressed: () async {
                  _addLog('‚ùå –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –Ω–∞–∂–∞—Ç–∞ - –≤—ã—Ö–æ–¥ —Å –ª–∏–Ω–∏–∏');
                  await _goOffline();
                  Navigator.of(context).pop();
                },
                icon: const Icon(Icons.close, color: Colors.black),
              ),
            ),
          ),
          
        ],
      ),
      ),
      ),
    );
  }
}
